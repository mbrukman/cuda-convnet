#summary The command-line arguments that this code takes.

= Introduction =

If you type
{{{
python convnet.py
}}}

You should get the following output, briefly describing the command-line arguments that this code expects:

{{{
convnet.py usage:
    Option                        Description                  Default 
    [--check-grads <0/1>      ] - Check gradients and quit?    [0]     
    [--epochs <int>           ] - Number of epochs             [50000] 
    [-f <string>              ] - Load file                    []      
    [--gpu <int,...>          ] - GPU override                 []      
    [--max-filesize <int>     ] - Maximum save file size (MB)  [0]     
    [--mini <int>             ] - Minibatch size               [128]   
    [--num-gpus <int>         ] - Number of GPUs               [1]     
    [--test-freq <int>        ] - Testing frequency            [50]    
    [--test-one <0/1>         ] - Test on one batch at a time? [1]     
    [--test-only <0/1>        ] - Test and quit?               [0]     
    [--zip-save <0/1>         ] - Compress checkpoints?        [0]     
     --data-path <string>       - Data path                            
     --data-provider <string>   - Data provider                        
     --layer-def <string>       - Layer definition file                
     --layer-params <string>    - Layer parameter file                 
     --save-path <string>       - Save path                            
     --test-range <int[-int]>   - Data batch range: testing            
     --train-range <int[-int]>  - Data batch range: training       
}}}

= What they mean =

You can see that most arguments have default values, so you don't have to provide them.

The angle brackets following the argument names tell you what kind of value each argument expects.

Now I'll describe what all of them mean.

First the optional arguments:
|| *Argument* || *Meaning* ||
|| --check-grads || [CheckingGradients Check the gradients] ||
|| --epochs || How many epochs to train on? An epoch is one pass through the training data. ||
|| -f || Load checkpoint from given path. All other parameters become optional. ||
|| --gpu || Set GPU index to run on (default is to grab fastest GPU available). ||
|| --max-filesize || Maximum amount of disk space occupied by all checkpoints. Set to 0 to only store last checkpoint. ||
|| --mini || Minibatch size. The minibatch size is the number of training cases over which a gradient is averaged to produce a weight update. This value must be a multiple of 128. ||
|| --num-gpus || Ignore this. ||
|| --test-freq || Compute the test error and save checkpoint to disk every *this many* training batches. ||
|| --test-one || If multiple testing batches are given, test on only one at a time. ||
|| --test-only || Compute the test error and quit. To be used in combination with the *-f* option. ||
|| --zip-save || Compress checkpoint files? This makes checkpointing slower and may have almost no effect on the file size. So the default is off. ||

Now the mandatory ones:

|| *Argument* || *Meaning* ||
|| --data-path || Specify a path where the net's [Data data provider] can find its data. ||
|| --data-provider || Specify a [Data data provider] to use to parse the data. ||
|| --layer-def || Specify a [LayerParams layer definition] file. ||
|| --layer-params || Specify a [LayerParams layer parameter] file. ||
|| --save-path || Specify a checkpointing path. ||
|| --test-range || Specify which data [Data batches] the net should use to compute the test error. ||
|| --train-range || Specify which data [Data batches] the net should use for training. ||